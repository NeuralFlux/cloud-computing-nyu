AWSTemplateFormatVersion: "2010-09-09"
Resources: 
  # NOTE: This is not recommended for production
  # we use root roles just to focus more on CloudFormation concepts
  # rather than the tedious templates
  # --------------------------------- IAM --------------------------------- #
  RootRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "codepipeline.amazonaws.com"
                - "cloudformation.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: "*"
            Resource: "*"
      Roles: 
        - Ref: "RootRole"

  # -------------------------------- S3 -------------------------------- #
  PhotoBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "a3-photos"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False
  
  FrontendBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "a3-frontend-website"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False
      WebsiteConfiguration:
        IndexDocument: index.html

  PublicReadBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        - !Ref PhotoBucket
        - !Ref FrontendBucket
      PolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Action: "s3:GetObject"
            Effect: Allow
            Resource: !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref PhotoBucket
              - /*
            - ''
            - - 'arn:aws:s3:::'
              - !Ref FrontendBucket
              - /*
            Principal: '*'
  
  # -------------------------------- Gateway -------------------------------- #
  Gateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "a3-smart-album-api"
      BinaryMediaTypes:
        - "*"
      Body: |
        swagger: "2.0"
        info:
          description: "AI Photo Search application, built during the Cloud and Big Data course\
            \ at New York University."
          version: "1.0.0"
          title: "AI Photo Search"
        host: "70frjwcsk7.execute-api.us-east-1.amazonaws.com"
        basePath: "/test"
        schemes:
        - "https"
        paths:
          /search:
            get:
              operationId: "searchPhotos"
              produces:
              - "application/json"
              parameters:
              - name: "q"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws_proxy"
                httpMethod: "POST"
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:489609369564:function:a3-search/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
            options:
              consumes:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Expose-Headers:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Expose-Headers: "'ETag'"
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    contentHandling: "CONVERT_TO_TEXT"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
          /upload:
            put:
              parameters:
              - name: "key"
                in: "query"
                required: true
                type: "string"
              - name: "x-amz-meta-customLabels"
                in: "header"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "400":
                  description: "400 response"
                "405":
                  description: "405 response"
              x-amazon-apigateway-integration:
                type: "aws"
                credentials: "arn:aws:iam::489609369564:role/album-search-api"
                httpMethod: "PUT"
                uri: "arn:aws:apigateway:us-east-1:s3:path/a3-photos/{key}"
                responses:
                  "200":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestParameters:
                  integration.request.header.x-amz-meta-customLabels: "method.request.header.x-amz-meta-customLabels"
                  integration.request.path.key: "method.request.querystring.key"
                passthroughBehavior: "when_no_match"
            options:
              consumes:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Expose-Headers:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Expose-Headers: "'ETag'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-amz-meta-customLabels'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    contentHandling: "CONVERT_TO_TEXT"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
        x-amazon-apigateway-gateway-responses:
          DEFAULT_4XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              gatewayresponse.header.Access-Control-Expose-Headers: "'ETag'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          DEFAULT_5XX:
            responseParameters:
              gatewayresponse.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
              gatewayresponse.header.Access-Control-Expose-Headers: "'ETag'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        x-amazon-apigateway-binary-media-types:
        - "*/*"

  # -------------------------------- Lex -------------------------------- #
  LexChatbot:
    Type: "AWS::Lex::Bot"
    Properties:
      DataPrivacy:
        ChildDirected: False
      IdleSessionTTLInSeconds: 60
      Name: "a3-keyword-finder"
      RoleArn: !GetAtt RootRole.Arn
      BotLocales:
        - LocaleId: "en_US"
          NluConfidenceThreshold: 0.40
          SlotTypes:
            - Name: "Keywords"
              SlotTypeValues:
                - SampleValue:
                    Value: dog
                - SampleValue:
                    Value: cat
                - SampleValue:
                    Value: tree
          Intents:
            - Name: "FindKeyword"
              SampleUtterances:
                - Utterance: "show me {Keyword_One}"
                - Utterance: "show me {Keyword_One} and {Keyword_Two}"
              SlotPriorities:
                - Priority: 1
                  SlotName: Keyword_One
                - Priority: 2
                  SlotName: Keyword_Two
              Slots:
                - Name: "Keyword_One"
                  SlotTypeName: "Keywords"
                  ValueElicitationSetting:
                    SlotConstraint: "Required"
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "What type of flowers would you like to order?"
                      MaxRetries: 3
                      AllowInterrupt: false
                - Name: "Keyword_Two"
                  SlotTypeName: "Keywords"
                  ValueElicitationSetting:
                    SlotConstraint: "Optional"
                    PromptSpecification:
                      MessageGroupsList:
                        - Message:
                            PlainTextMessage:
                              Value: "What type of flowers would you like to order?"
                      MaxRetries: 3
                      AllowInterrupt: false
            - Name: "FallbackIntent"
              Description: "Default intent when no other intent matches"
              ParentIntentSignature: "AMAZON.FallbackIntent"
  
  # -------------------------------- Opensearch -------------------------------- #
  OpensearchDB:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: "a3-photos"
      ClusterConfig:
        InstanceCount: 1
        InstanceType: "t3.small.search"
        MultiAZWithStandbyEnabled: False
        ZoneAwarenessEnabled: False
      EBSOptions:
          EBSEnabled: True
          VolumeSize: 10
          VolumeType: "gp3"
  
  # -------------------------------- CodePipeline -------------------------------- #
  A3Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt RootRole.Arn
            Stages:
              - Name: Source
                Actions:
                  - Name: AppSource
                    InputArtifacts: []
                    ActionTypeId:
                      Category: Source
                      Owner: AWS
                      Version: '1'
                      Provider: CodeStarSourceConnection
                    OutputArtifacts:
                      - Name: SourceOutput
                    Configuration:
                      BranchName: main
                      ConnectionArn: >-
                        arn:aws:codestar-connections:us-east-1:489609369564:connection/603c8448-d98e-4dab-9eaf-03edf2e3d287
                      FullRepositoryId: NeuralFlux/cloud-computing-nyu
                    RunOrder: 1
              - Name: Build
                Actions:
                  - Name: Build
                    InputArtifacts:
                      - Name: SourceOutput
                    ActionTypeId:
                      Category: Build
                      Owner: AWS
                      Provider: CodeBuild
                      Version: '1'
                    Configuration:
                      ProjectName: a3-lambda-builder
                    RunOrder: 1
                  - Name: BuildFrontend
                    InputArtifacts:
                      - Name: SourceOutput
                    OutputArtifacts:
                      - Name: frontendOutput
                    ActionTypeId:
                      Category: Build
                      Owner: AWS
                      Provider: CodeBuild
                      Version: '1'
                    Configuration:
                      ProjectName: a3-frontend-builder
                    RunOrder: 2
                - Name: Deploy
                  Actions:
                    - Name: DeployFrontend
                      InputArtifacts:
                        - Name: frontendOutput
                      ActionTypeId:
                        Category: Build
                        Owner: AWS
                        Provider: S3
                        Version: '1'
                      RunOrder: 1
            Triggers:
              - ProviderType: CodeStarSourceConnection
                GitConfiguration:
                  Push:
                    - Tags:
                        Includes:
                          - release*
                          - prod*
                  SourceActionName: AppSource

  # -------------------------------- Lambda -------------------------------- #
  LF1: 
    Type: AWS::Lambda::Function
    Properties:
      Role: !Ref RootRole
      FunctionName: "a3-index-photos"
      Runtime: "python3.11"
      Code: 
        ZipFile: |
          import os
          import json
          import logging
          import datetime

          import boto3

          import utils as opensearch_utils

          def lambda_handler(event, context):
              LABEL_DETECTION_MIN_CONFIDENCE = 99
              logging.debug(f"Event received: {event}")

              # extract details
              created_time = bucket_name = event['Records'][0]['eventTime']
              bucket_name = event['Records'][0]['s3']['bucket']['name']
              obj_key = event['Records'][0]['s3']['object']['key']
              logging.info(f"Extracted Bucket: {bucket_name}, Key: {obj_key}")
              
              # call rekognition
              rkgn_client = boto3.client('rekognition')
              rkgn_response = rkgn_client.detect_labels(
                  Image={
                      "S3Object": {
                          "Bucket": bucket_name,
                          "Name": obj_key
                      }
                  },
                  MinConfidence=LABEL_DETECTION_MIN_CONFIDENCE
              )
              labels = [label_group["Name"] for label_group in rkgn_response["Labels"]]

              logging.debug(f"RKGN response: {rkgn_response}")
              logging.info(f"Extracted Labels: {labels}")
              
              # add custom labels
              s3 = boto3.client("s3")
              s3_resp = s3.head_object(Bucket=bucket_name, Key=obj_key)
              print(f"S3 Metadata Resp: {s3_resp}")
              
              custom_labels = s3_resp["Metadata"].get("customlabels", [])
              print(f"Custom Labels: {custom_labels}")
              labels.extend(custom_labels.split(','))

              # add record to OpenSearch
              host = os.environ.get("OPENSEARCH_HOST_ENDPOINT")
              auth = (
                  os.environ.get("OPENSEARCH_USER_ID"),
                  os.environ.get("OPENSEARCH_PASSWD")
              )

              os_client = opensearch_utils.get_conn(host, auth)

              # docs for OpenSearch Index
              # https://opensearch.org/docs/latest/im-plugin/index/
              INDEX_NAME = os.environ.get("OPENSEARCH_INDEX_NAME")

              record = {
                  "bucket": bucket_name,
                  "objectKey": obj_key,
                  "createdTimestamp": datetime.datetime.utcnow()\
                      .isoformat(timespec="seconds") + "Z",
                  "labels": ' '.join(labels).lower()
              }

              os_response = opensearch_utils.add_record(os_client, INDEX_NAME, record)
              logging.debug(f"RESP {os_response} for INSERT {record}")

              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }

  
  LF2: 
    Type: AWS::Lambda::Function
    Properties:
      Role: !Ref RootRole
      FunctionName: "a3-search"
      Runtime: "python3.11"
      Code: 
        ZipFile: |
          import os
          import json
          import base64

          import boto3

          import utils

          def lambda_handler(event, context):
              print(event["queryStringParameters"]["q"])

              # get keywords from Lex
              lex = boto3.client('lex-runtime')
              lex_resp = lex.post_text(
                  botName="FindKeywords",
                  botAlias="$LATEST",
                  userId=os.environ.get("LEX_USERID"),
                  inputText=event["queryStringParameters"]["q"].lower()
              )
              assert lex_resp['ResponseMetadata']['HTTPStatusCode'] == 200
              keywords = utils.process_lex_response(lex_resp)
              assert len(keywords) >= 1
              print(keywords)

              # search OpenSearch
              # query ref - https://opensearch.org/docs/latest/query-dsl/full-text/match/
              os_query = {
                  "query": {
                      "match": {
                          "labels": ' '.join(map(lambda kw: kw + '~2', keywords)),
                          # fuzziness - dogs will still match dog
                      }
                  }
              }
              print(os_query)

              host = os.environ.get("OPENSEARCH_HOST_ENDPOINT")
              auth = (
                  os.environ.get("OPENSEARCH_USER_ID"),
                  os.environ.get("OPENSEARCH_PASSWD")
              )

              os_client = utils.get_conn(host, auth)

              # docs for OpenSearch Index
              # https://opensearch.org/docs/latest/im-plugin/index/
              INDEX_NAME = os.environ.get("OPENSEARCH_INDEX_NAME")

              os_resp = os_client.search(os_query, index=INDEX_NAME)
              print(f"Hits: {len(os_resp['hits']['hits'])}")

              # compile keys of matching photos
              matching_keys = list(map(
                  lambda record: record['_source']['objectKey'],
                  os_resp['hits']['hits']
              ))

              photo_urls = set()
              for key in matching_keys:
                  photo_urls.add(f"https://a3-photos.s3.amazonaws.com/{key}")
              
              return {
                  'headers': {
                      "Access-Control-Allow-Origin" : "*", # Required for CORS support to work
                  },
                  'statusCode': 200,
                  'body': json.dumps({'photo_urls': list(photo_urls)})
              }
